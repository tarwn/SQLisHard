SetId:		AGGREGATE
SetTitle:	Aggregate Exercises
SetSummary:	<p>Aggregation functions are great for data analysis over sets of data</p>

FinaleTitle: Finale
FinaleDetails: <p>Congratulations, you have finished the prepared SQL exercises!</p>
			<p>I continue to add more and expand the features so check back more or keep an eye on the 
			official <a href="https://twitter.com/SQLisHard" title="@sqlishard on twitter">@sqlishard</a> twitter account</p>

ExerciseId:	A1.0
Title:		A1.0 - COUNT
RequireExactColumnMatch: true
Query:		SELECT COUNT(*) FROM Orders;
Explanation:	<p>SELECTing rows of data out of the database is pretty powerful, but AGGREGATE functions provide the ability to perofmr analysis on the data. For instance,
				we could <br/>
				<br/>
				<code>SELECT * FROM Customers</code> 
				<br/>
				and look at the row count returned, or use this handy COUNT function: </p>
Example:	<code>
				SELECT COUNT(*) FROM Customers
			</code>
Exercise:	<p>Try writing a statement to count the records in <em>Orders</em>.</p>

ExerciseId:	A1.1
Title:		A1.1 - SUM
Query:		SELECT SUM(OrderTotal) FROM Orders WHERE OrderTime > '2013-01-01'
Explanation:	<p>Another useful aggregate is SUM(), which sums the values of a given column. One way we can use this is to look at the total money we've made from <em>Orders</em>:</p>
Example:	<code>
				SELECT SUM(OrderTotal) <br/>
				FROM Orders
			</code>
Exercise:	<p>Trying using a WHERE statement and the SUM function to return the <em>OrderTotal</em> for orders placed after 1/1/2013 (hint: <em>OrderTime</em>)</p>

ExerciseId:	A1.2
Title:		A1.2 - GROUP BY
Query:		SELECT Year(OrderTime) AS OrderYear, SUM(OrderTotal) AS TotalOfOrderTotal FROM Orders GROUP BY Year(OrderTime)
Pattern:	SUM\(OrderTotal\)\s+AS\s+TotalOfOrderTotal\s*
PatternTip:	Use 'SUM(OrderTotal) AS TotalOfOrderTotal' to name your column 'TotalOfOrderTotal'
Explanation:	<p>We can also use the GROUP BY statement to return functions on multiple subsets of data. For example, getting a count of orders for each year in our data:</p>
Example:	<code>
				SELECT Year(OrderTime) AS OrderYear, <br/>
					COUNT(*) as OrderCount<br/>
				FROM Orders <br/>
				GROUP BY Year(OrderTime)
			</code>
Exercise:	<p>This returns 1 row per year in the database, with the COUNT for that year. Try altering the query to return a Year and SUM of <em>OrderTotal</em> for each year.</p>

ExerciseId:	A1.3
Title:		A1.3 - More GROUP BY
Query:		SELECT Year(OrderTime) AS OrderYear, Month(OrderTime) AS OrderMonth, Day(OrderTime) AS OrderDay, SUM(OrderTotal) as OrderTotal FROM Orders GROUP BY Year(OrderTime), Month(OrderTime), Day(OrderTime) ORDER BY Year(OrderTime), Month(OrderTime), Day(OrderTime)
Explanation:	<p>We can also GROUP BY multiple columns, for example grouping by Year and Month to get monthly order totals:</p>
Example:	<code>
				SELECT Year(OrderTime) AS OrderYear, <br/>
						Month(OrderTime) AS OrderMonth, <br/>
						SUM(OrderTotal) AS OrderTotal <br/>
				FROM Orders <br/>
				GROUP BY Year(OrderTime), Month(OrderTime)<br/>
				ORDER BY Year(OrderTime), Month(OrderTime)
			</code>
Exercise:	<p>Now we have monthly order totals and they're in order by year and month. Can you extend this to include grouping by Year, Month, and Day?</p>

ExerciseId:	A1.4
Title:		A1.4 - MIN/MAX
Query:		SELECT Year(OrderTime) AS OrderYear, MAX(OrderTotal) as LargestOrderTotal FROM Orders GROUP BY Year(OrderTime)
Explanation:	<p>In addition to COUNT and SUM, there are also MIN and MAX aggregate functions, which return the smallest or largest value for the specified column.</p>
Example:	<code>
				SELECT MIN(OrderTime) AS EarliestDate, MAX(OrderTime) AS LatestDate <br/>
				FROM Orders
			</code>
Exercise:	<p>This is an easy way to find the smallest and largest values for a column. Can you find the largest OrderTotal for each year?
				<code>
					SELECT Year(OrderTime) AS OrderYear,</br>
					&nbsp;&nbsp;??? AS LargestOrderTotal<br/>
					FROM Orders<br/>
					??
				</code>
			</p>

ExerciseId:	A1.5
Title:		A1.5 - AVG/STDEV
Query:		SELECT AVG(OrderTotal) AS AverageOrderTotal, Year(OrderTime) AS OrderYear FROM Orders GROUP BY Year(OrderTime)
Explanation:	<p>We can also look at average values using AVG() and the standard deviation, using STDEV.</p>
				<p>Using DateDiff(<i>interval, from, to</i>) to calculate the number of days between OrderTime 
				and DeliveryTime for each order, here is the AVG delivery time for all orders:</p>
Example:	<code>
				SELECT AVG(DateDiff(day,OrderTime, DeliveryTime)) AS AverageDeliveryTime<br/>
				FROM Orders
			</code>
Exercise:	<p>Using the AVG function, can you calculate the average OrderTotal for each year?</p>

ExerciseId:	A2.0
Title:		A2.0 - HAVING
Query:		SELECT CustomerId, SUM(OrderTotal) FROM Orders GROUP BY CustomerId HAVING SUM(OrderTotal) > 1000
Explanation:	<p>Now we have several ways we can aggregate and can use the WHERE and GROUP BY clauses, but sometimes we want to filter the results <u>after</u> we aggregate. That's where HAVING comes in:</p>
Example:	<code>
				SELECT CustomerId, COUNT(*) AS OrderCount<br/>
				FROM Orders<br/>
				GROUP BY CustomerId<br/>
				HAVING COUNT(*) > 5
			</code>
Exercise:	<p>This query will count how many orders each customer has placed, then filter only for customers with more than 5. 
				Try to alter this query to find big spenders whose total OrderTotal is more than $1000.</p>


ExerciseId:	A2.2
Title:		A2.2 - ORDER BY
Query:		SELECT TOP 10 CustomerId, SUM(OrderTotal) FROM Orders GROUP BY CustomerId ORDER BY SUM(OrderTotal) DESC
Explanation:	<p>Just like a regular SELECT query, we can also user ORDER BY and TOP on queries with aggregates. Here we find the 5 customers that placed the most orders:</p>
Example:	<code>
				SELECT TOP 5 CustomerId, COUNT(*)<br/>
				FROM Orders<br/>
				GROUP BY CustomerId<br/>
				ORDER BY COUNT(*) DESC
			</code>
Exercise:	<p>Can you change this query to find the 10 customers that have spent the most using ORDER BY and SUM()?</p>


ExerciseId:	A2.3
Title:		A2.3 - INNER JOIN
Query:		SELECT TOP 10 CustomerId, SUM(OrderTotal), FirstName, LastName FROM Orders O INNER JOIN Customers C ON C.Id = O.CustomerId GROUP BY CustomerId, FirstName, LastName ORDER BY SUM(OrderTotal) DESC;
Explanation:	<p>Just like a basic SELECT statement, we can use INNER JOIN to combine records from multiple tables. For instance, here is the average order amount for the first letter of peoples names:</p>
Example:	<code>
				SELECT LEFT(FirstName, 1), AVG(OrderTotal)<br/>
				FROM Orders O<br/>
					INNER JOIN Customers C ON C.Id = O.CustomerId<br/>
				GROUP BY LEFT(FirstName, 1)<br/>
				ORDER BY LEFT(FirstName, 1)
			</code>
Exercise:	<p>Using your previous query from 2.2 (top 10 customers that have spent the most), can you expand it to return CustomerId, the total, and FirstName and LastName?</p>


ExerciseId:	A2.4
Title:		A2.4 - LEFT JOIN
Query:		SELECT LastName, SUM(OrderTotal) FROM Customers C INNER JOIN Orders O ON O.CustomerId = C.Id GROUP BY LastName ORDER BY SUM(OrderTotal)
Explanation:	<p>Sometimes we will want to SUM records, but won't have records in the second table. An INNER JOIN only returns results when there are matches in both tables, a LEFT JOIN will always return records from the LEFT table, even if there isn't a match in the RIGHT one:</p>
Example:	<code>
				SELECT LastName, COUNT(O.Id)
				FROM Customers C
					LEFT JOIN Orders O ON C.Id = O.CustomerId AND O.OrderTime BETWEEN '2013-01-01' AND '2013-02-01'
				GROUP BY LastName
				HAVING COUNT(O.Id) = 0
			</code>
Exercise:	<p>Here we have JOINed only to <em>Orders</em> for 1 month of 2013 to find who didn't order in this period.</p>
			<p>Can you use a LEFT JOIN to return LastName and SUM() of <em>OrderTotal</em> for all customers, ORDERed from smalledt to largest SUM?</p>

ExerciseId:	A3.0
Title:		A3.0 - Putting it all together
Query:		SELECT TOP  10 FirstName , LastName, O.Id, MAX(DateDiff(minute,OrderTime,DeliveryTime)) FROM Customers C    INNER JOIN Orders O ON C.Id = O.CustomerId GROUP BY FirstName , LastName, O.Id ORDER BY MAX(DateDiff(minute,OrderTime,DeliveryTime)) DESC;
Explanation:	<p>Now let's put all of thethings we've learned together.</p>
Example:	<code>
				SELECT TOP ? ???
				FROM ???
					INNER JOIN ??? ON ???.??? = ???.???
				WHERE ???
				GROUP BY ???
				HAVING ???
				ORDER BY ???
			</code>
Exercise:	<p>Find the 10 customers who have had the longest delivery time, <em>MAX(DateDiff(minute,OrderTime,DeliveryTime))</em> and return their <em>FirstName</em>, <em>LastName</em>, Order <em>Id</em>, and that elapsed delivery time in minutes.</p>


ExerciseId:	A3.1
Title:		A3.1 - Conditional Tricks
Query:		SELECT SUM(CASE WHEN DATEPART(weekday,OrderTime) = 1 THEN 1 ELSE 0 END) AS Saturdays, SUM(CASE WHEN DATEPART(weekday,OrderTime) = 1 THEN 0 ELSE 1 END) AS TheRest 	FROM Orders
Explanation:	<p>Once you have Aggregate functions, you can alsdo do some interesting tricks with conditional statements (CASE WHEN x THEN y ELSE z END). For instance, you could use 2 consitional statements to calculate average orders for saturdays versus the rest of the week:</p>
Example:	<code>
				SELECT AVG(CASE WHEN DATEPART(weekday,OrderTime) = 1 THEN OrderTotal ELSE NULL END) AS Saturdays,<br/>
					AVG(CASE WHEN DATEPART(weekday,OrderTime) = 1 THEN NULL ELSE OrderTotal END) AS TheRest<br/>
				FROM Orders
			</code>
Exercise:	<p>In the first CASE we return OrderTotal if the record is a saturday, or 0 if it is not. Switch these to SUM instead of AVG and return 1 instead of OrderTotal, this will give us a count of Saturday vs non-Saturday orders.</p>


ExerciseId:	A3.2
Title:		A3.2 - Conditional Tricks #2
Query:		SELECT COUNT(*), CASE WHEN DATEPART(weekday,OrderTime) = 1 THEN 'Saturday' ELSE 'Not Saturday' END FROM Orders GROUP BY CASE WHEN DATEPART(weekday,OrderTime) = 1 THEN 'Saturday' ELSE 'Not Saturday' END  
Explanation:	<p>You can also use a conditional in a GROUP BY to return individual records instead of columns. Here is the same AVG <em>OrderTotal</em> for Saturdays vs non as individual records:</p>
Example:	<code>
				SELECT AVG(OrderTotal),<br/>
					CASE WHEN DATEPART(weekday,OrderTime) = 1 THEN 'Saturday' ELSE 'Not Saturday' END<br/>
				FROM Orders<br/>
				GROUP BY CASE WHEN DATEPART(weekday,OrderTime) = 1 THEN 'Saturday' ELSE 'Not Saturday' END
			</code>
Exercise:	<p>Try using a GROUP BY to Count Orders on Saturdays vs not-saturdays like this example.</p>
