SetId:		AGGREGATE
SetTitle:	Aggregate Exercises
SetSummary:	<p>Aggregation functions are great for data analysis over sets of data</p>

FinaleTitle: Finale
FinaleDetails: <p>Congratulations, you have finished the prepared SQL exercises!</p>
			<p>I continue to add more and expand the features so check back more or keep an eye on the 
			official <a href="https://twitter.com/SQLisHard" title="@sqlishard on twitter">@sqlishard</a> twitter account</p>

ExerciseId:	A1.0
Title:		A1.0 - COUNT
Query:		SELECT COUNT(*) FROM Orders;
Explanation:	<p>SELECTing rows of data out of the database is pretty powerful, but AGGREGATE functions provide the ability to perofmr analysis on the data. For instance,
				we could <br/>
				<br/>
				<code>SELECT * FROM Customers</code> 
				<br/>
				and look at the row count returned, or use this handy COUNT function: </p>
Example:	<code>
				SELECT COUNT(*) FROM Customers<br/>
			</code>
Exercise:	<p>Try writing a statement to count the records in Orders.</p>

ExerciseId:	A1.1
Title:		A1.1 - SUM
Query:		SELECT SUM(OrderTotal) FROM Orders WHERE OrderTime > '2013-01-01'
Explanation:	<p>Another useful aggregate is SUM(), which sums the values of a given column. One way we can use this is to look at the total money we've made from Orders:</p>
Example:	<code>
				SELECT SUM(OrderTotal) <br/>
				FROM Orders<br/>
			</code>
Exercise:	<p>Trying using a WHERE statement and the SUM function to return the OrderTotal for orders placed after 1/1/2013 (OrderTime)</p>

ExerciseId:	A1.2
Title:		A1.2 - GROUP BY
Query:		SELECT Year(OrderTime) AS OrderYear, SUM(OrderTotal) AS TotalOfOrderTotal FROM Orders GROUP BY Year(OrderTime)
Pattern:	SUM\(OrderTotal\)\s+AS\s+TotalOfOrderTotal\s*
PatternTip:	Use 'SUM(OrderTotal) AS TotalOfOrderTotal' to name your column 'TotalOfOrderTotal'
Explanation:	<p>We can also use the GROUP BY statement to return functions on multiple subsets of data. For example, getting a count of orders for each year in our data:</p>
Example:	<code>
				SELECT Year(OrderTime) AS OrderYear, <br/>
					COUNT(*) as OrderCount<br/>
				FROM Orders <br/>
				GROUP BY Year(OrderTime)
			</code>
Exercise:	<p>This returns 1 row per year in the database, with the COUNT for that year. Try altering the query to return an OrderYear and SUM of OrderTotal for each year.</p>

ExerciseId:	A1.3
Title:		A1.3 - More GROUP BY
Query:		SELECT Year(OrderTime) AS OrderYear, Month(OrderTime) AS OrderMonth, Day(OrderTime) AS OrderDay, SUM(OrderTotal) as OrderTotal FROM Orders GROUP BY Year(OrderTime), Month(OrderTime), Day(OrderTime) ORDER BY Year(OrderTime), Month(OrderTime), Day(OrderTime)
Explanation:	<p>We can also GROUP BY multiple columns, for example grouping by Year and Month to get monthly order totals:</p>
Example:	<code>
				SELECT Year(OrderTime) AS OrderYear, <br/>
						Month(OrderTime) AS OrderMonth, <br/>
						SUM(OrderTotal) AS OrderTotal <br/>
				FROM Orders <br/>
				GROUP BY Year(OrderTime), Month(OrderTime)<br/>
				ORDER BY Year(OrderTime), Month(OrderTime)
			</code>
Exercise:	<p>Now we have monthly order totals and they're in order by year and month. Can you extend this to include grouping by Year, Month, and Day?</p>

ExerciseId:	A1.4
Title:		A1.4 - MIN/MAX
Query:		SELECT Year(OrderTime) AS OrderYear, MAX(OrderTotal) as LargestOrderTotal FROM Orders GROUP BY Year(OrderTime)
Explanation:	<p>In addition to COUNT and SUM, there are also MIN and MAX aggregate functions, which return the smallest or largest value for the specified column.</p>
Example:	<code>
				SELECT MIN(OrderTime) AS EarliestDate, MAX(OrderTime) AS LatestDate <br/>
				FROM Orders
			</code>
Exercise:	<p>This is an easy way to find the smallest and largest values for a column. Can you find the largest OrderTotal for each year?
				<code>
					SELECT Year(OrderTime) AS OrderYear,</br>
						??? AS LargestOrderTotal<br/>
					FROM Orders<br/>
					??
				</code>
			</p>

ExerciseId:	A1.5
Title:		A1.5 - AVG/STDEV
Query:		SELECT AVG(OrderTotal) AS AverageOrderTotal, Year(OrderTime) AS OrderYear FROM Orders GROUP BY Year(OrderTime)
Explanation:	<p>We can also look at average values using AVG() and the standard deviation, using STDEV.</p>
				<p>Using DateDiff(<i>interval, from, to</i>) to calculate the number of days between OrderTime 
				and DeliveryTime for each order, here is the AVG delivery time for all orders:</p>
Example:	<code>
				SELECT AVG(DateDiff(day,OrderTime, DeliveryTime)) AS AverageDeliveryTime<br/>
				FROM Orders
			</code>
Exercise:	<p>Using the AVG function, can you calculate the average OrderTotal for each year, naming these AverageOrderTotal and OrderYear?</p>

ExerciseId:	A2.0
Title:		A2.0 - HAVING
Query:		SELECT Year(OrderTime) AS OrderYear, SUM(OrderTotal) as OrderTotal FROM Orders GROUP BY Year(OrderTime)
Explanation:	<p>Great, we can count, sum, and min/max across all records and small groups of records. But sometimes we only want the most notable groups and that's where HAVING comes in:</p>
Example:	<code>
				SELECT CustomerId, COUNT(*)<br/>
				FROM Orders<br/>
				GROUP BY CustomerId<br/>
				HAVING COUNT(*) > 5
			</code>
Exercise:	<p>This query finds return shoppers. It counts how many orders each customer has placed, but only returns the customers (groups) that have more than 5 orders. Lets find big spenders by instead SUMming the OrderTotal and only returning those that have spent more than $1000</p>


ExerciseId:	A2.2
Title:		A2.2 - ORDER BY
Query:		SELECT Year(OrderTime) AS OrderYear, SUM(OrderTotal) as OrderTotal FROM Orders GROUP BY Year(OrderTime)
Explanation:	<p>When a query is executed, the database processes the FROM and WHERE, then GROUP BY, then HAVING, then SELECT, then ORDER BY. Since the GROUP BY and HAVING occur before the ORDER BY, we can ORDER BY aggregate functions</p>
Example:	<code>
				SELECT CustomerId, COUNT(*)<br/>
				FROM Orders<br/>
				GROUP BY CustomerId<br/>
				ORDER BY COUNT(*) DESC
			</code>
Exercise:	<p>Now we're looking at the number of orders per customer, ordered by most prolific to least.... need exercise</p>


ExerciseId:	A2.3
Title:		A2.3 - INNER JOIN
Query:		SELECT 1;
Explanation:	<p>use an inner join w/ an aggregate</p>
Example:	<code>
				example
			</code>
Exercise:	<p>exercise</p>


ExerciseId:	A2.4
Title:		A2.4 - INNER JOIN Duplication
Query:		SELECT 1;
Explanation:	<p>use an inner join w/ an aggregate + duplicatation of rows</p>
Example:	<code>
				example
			</code>
Exercise:	<p>exercise</p>


ExerciseId:	A2.5
Title:		A2.5 - LEFT JOIN
Query:		SELECT 1;
Explanation:	<p>use a left join w/ an aggregate</p>
Example:	<code>
				example
			</code>
Exercise:	<p>exercise</p>

ExerciseId:	A3.0
Title:		A3.0 - Conditional Tricks
Query:		SELECT 1;
Explanation:	<p>SUM a conditional field - ordertotals based on short/long delivery</p>
Example:	<code>
				example
			</code>
Exercise:	<p>exercise</p>


ExerciseId:	A3.1
Title:		A3.1 - Conditional Tricks #2
Query:		SELECT 1;
Explanation:	<p>Pseudo count (SUM IF blah THEN 1 ELSE 0 END)</p>
Example:	<code>
				example
			</code>
Exercise:	<p>exercise</p>
