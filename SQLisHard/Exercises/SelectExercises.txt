SetId:		SELECT
SetTitle:	SELECT Exercises
SetSummary:	<p>Whether you're just getting started or trying to brush up on existing
			skills, this is a great spot to start.</p>

FinaleTitle: Finale
FinaleDetails: <p>Congratulations, you have finished the prepared SQL exercises!</p>
			<p>I continue to add more and expand the features so check back more or keep an eye on the 
			official <a href="https://twitter.com/SQLisHard" title="@sqlishard on twitter">@sqlishard</a> twitter account</p>

ExerciseId:	S1.0
Title:		S1.0 - SELECT
Query:		SELECT * FROM Customers
Explanation:	<p>Databases store data in tables, which we can think of like spreadsheets. Each table 
			holds rows of data that share a common set of columns. We use the <em>SELECT</em> 
			statement to retrieve rows of data from those tables. </p>
Example:	<code>SELECT *<br/> FROM <i>table_name</i></code>
Exercise:	<p>Try using the <em>SELECT</em> statement to retrieve rows from the <em>Customers</em> 
			table.</p>
			
ExerciseId:	S1.1
Title:		S1.1 - SELECT Columns
RequireExactColumnMatch: true
Query:		SELECT Id, FirstName FROM Customers
Explanation:	<p>The * means "return all of the columns". We can also ask for specific columns:</p>
Example:	<code> SELECT <i>column_name, column_name</i><br/> FROM <i>table_name</i></code> 
Exercise:	<p>Try editing your query to retrieve only the <em>Id</em> and <em>FirstName</em> columns.

ExerciseId:	S1.2
Title:		S1.2 - SELECT Columns
RequireExactColumnMatch: true
Query:		SELECT FirstName, Id FROM Customers
Explanation:	<p>Asking for specific columns means less data to download and means the database won't 
			have to look up all the columns before executing the query, like it does when we SELECT 
			*.</p>
Example:
Exercise:	<p>When we specify the columns we also have control of their order in the result. Last time we SELECTed the <em>Id</em> and <em>FirstName</em> columns,
			let's SELECT them in the reverse order now (SELECT FirstName, Id ...)</p>

ExerciseId:	S2.0
Title:		S2.0 - WHERE
Query:		SELECT * FROM Customers WHERE Id = 5
Explanation:	<p>Now we can read all of the rows from a table, but typically we only want to read rows
			that meet certain criteria. We can use the WHERE clause to supply those criteria, like so:</p>
Example:	<code> SELECT <i>column_name, column_name</i><br/>FROM <i>table_name</i><br/>WHERE <i>condition</i></code>
Exercise:	<p>A numeric condition to filter on id's that are equal to 5 would look like: <em>id = 5</em>.
			Let's SELECT all columns (*) FROM the <em>Customers</em> table using that example condition.</p>

ExerciseId:	S2.1
Title:		S2.1 - WHERE conditions
Query:		SELECT * FROM Orders WHERE OrderTotal BETWEEN 100 and 200
Explanation:	<p>Besides equality comparisons, we can also make greater than &gt;, less than &lt;, not
			equals &lt;&gt;, and BETWEEN comparisons.</p>
Example:	<code> 
				SELECT <i>column_name, column_name</i><br/>
				FROM <i>table_name</i><br/>
				WHERE <i>column_name</i> BETWEEN <i>value1</i> AND <i>value2</i>
			</code>
Exercise:	<p>Let's select all columns (*) from <em>Orders</em> that have an <em>OrderTotal</em> BETWEEN 100 and 200</p>

ExerciseId:	S2.2
Title:		S2.2 - WHERE conditions
Query:		SELECT * FROM Orders WHERE DeliveryTime < '2013-06-20'
Explanation:	<p>Conditions can be applied to any column in our tables, not just numbers. When we compare
			date and text values we have to surround them with single quotes.</p>
Example:	<code>SELECT *<br/>FROM Orders<br/>WHERE OrderTime > '2013-01-01'</code>
Exercise:	<p>Let's select all columns (*) from <em>Orders</em> where the <em>DeliveryTime</em> is less
			than June 20th, 2013.</p>

ExerciseId:	S2.3
Title:		S2.3 - LIKE
Query:		SELECT * FROM Customers WHERE LastName LIKE 'A%'
Explanation:	<p>The LIKE comparison allows us to search for text that matches a partial search string. 
			For instance, searching for Name LIKE 'Jan%' would match Jane and Janet but not Jack. The %
			character is a wildcard that can match any number of unknown characters and the _ character
			will match a single unknown character.</p>
Example:	<code>SELECT *<br/>FROM Customers<br/>WHERE FirstName LIKE 'Jan%'</code>
Exercise:	<p>Let's select all columns (*) from <em>Customers</em> whose <em>LastName</em> starts with 
			the letter A.</p>

ExerciseId:	S2.4
Title:		S2.4 - OR
Query:		SELECT * FROM Customers WHERE FirstName LIKE 'A%' OR Id < 10
Explanation:	<p>We can combine conditions with AND and OR statements to define more complex conditions.</p>
Example:	<code>SELECT *<br/>FROM Customers<br/>WHERE Id = 1 OR Id = 12</code>
Exercise:	<p>Let's select all columns (*) from <em>Customers</em> where their <em>FirstName</em> starts
			with A or their <em>Id</em> is less than 10.</p>

ExerciseId:	S2.5
Title:		S2.5 - AND
Query:		SELECT * FROM Orders WHERE OrderTotal > 100 AND OrderTime > '2012-10-12'
Explanation:	<p>An AND indicates that both conditions must be true in order for a record to be returned.</p>
Example:	<code>SELECT *<br/>FROM Customers<br/>WHERE <i>condition</i> AND <i>condition</i></code>
Exercise:	<p>Let's select all columns (*) from <em>Orders</em> where their <em>OrderTotal</em> is greater
			than 100 AND their <em>OrderTime</em> is greater than October 12th, 2012.</p>

ExerciseId:	S2.6
Title:		S2.6 - Complex AND/OR
Query:		SELECT * FROM Orders WHERE OrderTotal > 300 OR (OrderTotal > 200 AND OrderTime > '2012-11-15')
Explanation:	<p>More complex conditions can be built from several AND or OR cases using parantheses to help
			the server understand which conditions to evaluate first. </p>
Example:	<p>All rows with <em>FirstName</em> and <em>LastName</em> starting with 'A' plus the record with 
			an <em>Id</em> of 5: <code>(FirstName LIKE 'A%' AND LastName LIKE 'A%') OR Id = 5</code></p>
			<p>All rows with <em>FirstName</em> starting with 'A' and either a <em>LastName</em> starting 
			with 'A' or an <em>Id</em> of 5: <code>FirstName LIKE 'A%' AND (LastName LIKE 'A%' OR Id = 5)</code></p>
Exercise:	<p>Let's select all columns (*) from <em>Orders</em> where their <em>OrderTotal</em> is greater
			than 300 plus all records where the <em>OrderTotal</em> is greater than 200 and the 
			<em>OrderTime</em> is after November 15th, 2012.</p>

ExerciseId:	S3.0
Title:		S3.0 - ORDER BY
Query:		SELECT * FROM Orders ORDER BY OrderTotal
Explanation:	<p>When we're SELECTing data, often the order we return it can be important. We can specify how
			we would like the data to be sorted by using an ORDER BY statement:</p>
Example:	<code>SELECT *<br/>FROM Orders<br/>WHERE OrderTime > '2013-01-15'<br/>ORDER BY OrderTime</code>
Exercise:	<p>Let's SELECT all columns (*) from <em>Orders</em> and ORDER BY their <em>OrderTotal</em>.</p>

ExerciseId:	S3.1
Title:		S3.1 - ORDER BY DESC
Query:		SELECT * FROM Orders ORDER BY DeliveryTime DESC
Explanation:	<p>When defining the column we want to ORDER BY, we have the option of sorting in ascending 
			or descending order. This is done by adding either ASC or DESC after the column name. When we 
			don't tell it one, it assumes ASCending order.</p>
Example:	<code>SELECT *<br/>FROM Orders<br/>WHERE OrderTime > '2013-01-15'<br/>ORDER BY OrderTime DESC</code>
Exercise:	<p>SELECT all columns (*) from <em>Orders</em> again, but this time ORDER BY their <em>DeliveryTime</em> 
			in descending order</p>

ExerciseId:	S3.2
Title:		S3.2 - More ORDER BY
Query:		SELECT * FROM Customers ORDER BY LastName, FirstName
Explanation:	<p>Like the SELECT statement, we can specify multiple columns for the ORDER BY.</p>
Example:	<code>SELECT *<br/>FROM Orders<br/>WHERE OrderTime > '2013-01-15'<br/>ORDER BY OrderTime DESC, OrderTotal</code>
Exercise:	<p>Let's SELECT everyone (*) from the <em>Customers</em> and sort them by <em>LastName</em> and 
			<em>FirstName</em> to see this in practice. Customers with matching last names will be sub-sorted
			by their first names.</p>

ExerciseId:	S3R
Title:		S1.0 to 3.2 - Recap
Query:		SELECT * FROM Orders WHERE OrderTime < '2013-02-01' AND DeliveryTime > '2013-01-31' ORDER BY OrderTotal DESC
Explanation:	<p>We have successfully queried for specific columns and all (*) columns from a table, applied single and
			multiple WHERE filters of varying types, and enforced sorting order on the table. </p>
Example:	<code>SELECT *<br/>FROM <em>TableName</em><br/>WHERE <em>condition</em> AND/OR <em>condition</em><br/>ORDER BY <em>ColumnName</em> ASC/DESC</code>
Exercise:	<p>Let's put it all together. Let's select all columns from the <em>Orders</em> table where the 
			<em>OrderTime</em> is earlier than 2013-02-01 and the <em>DeliveryTime</em> is later than 2013-01-31 and
			then finally order those records by the <em>OrderTotal</em> descending.</p>


ExerciseId:	S4.0
Title:		S4.0 - Qualified Columns
Query:		SELECT Customers.Id FROM Customers WHERE Customers.Id < 5
Pattern:	Customers\.Id(.|\s)+Customers\.Id
PatternTip:	Your query should have 2 references to Customers.Id
Explanation:	<p>Shortly we will be accessing both the <em>Orders</em> and <em>Customers</em> table in the same query,
			both of which have an Id column. We can clarify which Id colum we are referencing by prefixing the column
			name with the table we are referencing it from.</p>
Example:	<code>
				SELECT Customers.Id<br/>
				FROM Customers
			</code>
Exercise:	<p>Using the example query above, create a query for the <em>Customers</em>.<em>Id</em> column where the Id is 
			less than 5. Use the two part Table.Column method whereever you access the Id column.</p>

ExerciseId:	S4.1
Title:		S4.1 - Table Aliases
Query:		SELECT * FROM Customers CUST WHERE CUST.Id < 10
Pattern:	FROM\sCustomers\sCUST(.|\s)*CUST\.Id
PatternTip:	Your from statement should look like "FROM Customers CUST" and you should have a reference to CUST.id in the WHERE clause
Explanation:	<p>Typing the full table name can be tedious and will not work for queries that 
			reference the same table more than once. Rather than using the full table name, it's possible to define an alias in
			the FROM statement and use the alias instead of the full table name.</p>
Example:	<code>
				SELECT *<br/>
				FROM Customers C<br/>
				WHERE C.Id < 5
			</code>
Exercise:	<p>In this example I have used "C" as an alias for the <em>Customers</em> table. Starting with a similar query, retrieve
			all columns (*) from <em>Customers</em> where the <em>Id</em> is less than 10, and use an alias of CUST for the <em>Customers</em>
			table.</p>

ExerciseId:	S4.2
Title:		S4.2 - Column Aliasing
RequireExactColumnMatch: true
Query:		SELECT Id AS OrderId FROM Orders WHERE OrderTotal < 50
Pattern:	SELECT\s*Id\s*AS\s*OrderId
PatternTip:	Your SELECT statement should look like 'SELECT Id AS OrderId'
Explanation:	<p>When we start working with multiple tables or calculated columns, the ability to assign an alias
			to tables or columns can be extremely useful.</p>
Example:	<code>
				SELECT OrderTotal, <br/>
						OrderTotal AS RenamedOrderTotal<br/>
				FROM Orders
			</code>
Exercise:	<p>Try selecting the <em>Id</em> column from the <em>Orders</em> table, but alias it as "OrderId" and only include rows where the <em>OrderTotal</em> is less than 50</p>

ExerciseId:	S5.0
Title:		S5.0 - INNER JOIN
RequireExactColumnMatch: true
Query:		SELECT * FROM Customers C INNER JOIN Orders O ON C.id = O.CustomerId
Explanation:	<p>Now that we can pull data out of a single table and qualify column names, let's take it a step further. JOIN statements
			allow us to 'join' the rows of several tables together using a condition to define how they 
			match one another.</p>
Example:	<code>
				SELECT <i>[columns]</i><br/>
				FROM <i>FirstTable</i><br/>
					INNER JOIN <i>SecondTable</i> ON <i>FirstTable.Id = SecondTable.FirstTableId</i>
			</code>
Exercise:	<p>Try using the INNER JOIN syntax to SELECT all columns from the <em>Customers</em> and 
			<em>Orders</em> tables where the <em>CustomerId</em> column in <em>Orders</em> matches the <em>Id</em>
			column in <em>Customers</em>. Since both tables have an Id column, you will need to qualify the 
			<em>Customers</em> id in the WHERE clause with either the table name or a table alias.</p>

ExerciseId:	S5.1
Title:		S5.1 - JOIN w/ WHERE
Query:		SELECT * FROM Customers C INNER JOIN Orders O ON C.id = O.CustomerId WHERE O.OrderTotal > 200
Explanation:	<p>Just like querying a single table, we can include a WHERE clause on our JOINed tables to 
			filter down the results.</p>
Example:	<code>
				SELECT *<br/>
				FROM Customers C<br/>
					INNER JOIN Orders O ON O.CustomerId = C.Id<br/>
				WHERE C.LastName LIKE 'A%'
			</code>
Exercise:	<p>Try using the INNER JOIN syntax to SELECT all columns from the <em>Customers</em> and 
			<em>Orders</em> tables using the ON statement above and a WHERE statement to limit the results
			to rows with an OrderTotal greater than 200</p>
