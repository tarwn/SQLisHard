@{
    ViewBag.Title = "Exercise";
    string indexURL = @Url.Action("Statement", "api");
    string baseUrl = @Url.Content("~");
}
<div id="left">
    <h1>SQL is Hard</h1>
    
    <div id="summary">
    <p>SQL is not as hard as it looks, but learning it can be daunting. There are a ton of great books and recorded presentations, but 
        sometimes it's easiest to just dive in and get our hands dirty.</p>
    </div>

    <div id="exerciseList" data-bind="with: exercises">
        <h2 data-bind="text: title">Exercises</h2>
        <div data-bind="html: summary"></div>
        <ul data-bind="foreach: exercises">
            <li data-bind="text: title"></li>
        </ul>
    </div>
    <a href="javascript: void(0)" class="DEBUG" data-bind="visible: isDebug, click: exercises().advanceExercise">Next Exercise</a>
</div>
<div id="main">
    <div id="exerciseDescription" data-bind="with: exercises().currentExercise">
        <h2 data-bind="text: title">Exercise Title</h2>
        <div data-bind="html: details"></div>
    </div>
    <div id="editor">
        <div id="queryInputArea">
            <div id="commandBar">
                <input id="queryExecutionButton" type="button" value="Execute" data-bind="click: executeQuery.bind(this, true), disable: currentQuery.isRunning" />
            </div>
            <textarea id="queryInput" cols="80" rows="8" data-bind="value: currentQuery.queryText"></textarea>
        </div>
        <div id="queryResultsArea">
            <div id="queryResultsTab">Results</div>
            <div id="queryResults" data-bind="with: currentQuery.queryResult">
                <div data-bind="template: { name: isError() ? 'result-error' : 'result-rows' }"></div>
            </div>
        </div>
        <div id="queryExecutionStatusBar">
            <div id="queryStatus" data-bind="template: { name: currentQuery.isRunning() ? 'query-status-indicator-running' : 'query-status-indicator-notrunning', data: currentQuery}" ></div>
            <div id="resultsCount" data-bind="template: { name: 'query-status-record-count', data: currentQuery.queryResult, if: currentQuery.queryResult }"></div>
        </div>
    </div>
</div>

<script type="text/javascript">
    $(function () {
        // init so we can pass in API URL
        SqlIsHardApp.init('@baseUrl', '@indexURL');

        // define exercises - will be a server request
        var exerciseData = {
            Title: "SELECT Exercises",
            Summary: "<p>Whether you're just getting started or trying to brush up on existing skills, this is a great spot to start.</p>",
            Exercises: [
                { id: "S1.0", title: "S1.0 - SELECT", details: "<p>Databases store data in tables, which we can think of like spreadsheets. Each table holds rows of data that share a common set of columns. The <em>SELECT</em> statement is used to retrieve rows of data from those tables. </p> <code>SELECT * FROM <i>table_name</i></code><p>Try using the <em>SELECT</em> statement to retrieve rows from the <em>Clients</em> table.</p>" },
                { id: "S1.1", title: "S1.1 - SELECT Columns", details: "<p>The * means \"return all of the columms\". If we want only a couple columns, we can ask for a list of just those columns.</p><code> SELECT <i>column_name, <column_name></i> FROM <i>table_name</i><p>try using the <em>SELECT</em> to retrieve just the <em>Id</em> and <em>FirstName</em> columns from the <em>Clients</em> table." },
                { id: "S1.2", title: "S1.1 - SELECT Columns", details: "<p>Excellent. Asking for specific columns not only reduces the amount of data to download, it also means the database doesn't have to do the extra work of looking up what columns are available from the table ahead of time, like it does with the *.</p><p>Specifying the columns also puts you in control of the order they are received, now try to retrieve the <em>Id</em> and <FirstName</em> columns in reverse order.</p>" }
            ],
            Finale: { title: "Finale", details: "All Done!" }
        };

        SqlIsHardApp.ViewModel.setExercises(exerciseData);
        SqlIsHardApp.ViewModel.currentQuery.queryText("type a query here");

        SqlIsHardApp.ViewModel.isDebug(false);

        // apply bindings
        ko.applyBindings(SqlIsHardApp.ViewModel);
    });
</script>