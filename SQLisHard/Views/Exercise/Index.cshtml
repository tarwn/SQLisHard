@{
    ViewBag.Title = "Exercise";
    string indexURL = @Url.Action("Statement", "api");
}
<h1>SQL is Hard</h1>
<div id="exerciseList">
    <ul>
        <li class="selected">S1.0 - Select</li>
        <li>S1.1 - Select Columns</li>
        <li>S1.2 - Column Aliases</li>
        <li>S2.0 - Where</li>
        <li>S2.1 - And</li>
        <li>S2.2 - Or</li>
        <li>S2.3 - Combining And/Or</li>
        <li>S3.0 - Order</li>
        <li>S3.1 - More Order</li>
        <li>S4.0 - Inner Join</li>
        <li>S4.1 - Multiple Inner Joins</li>
        <li>S5.0 - Left Outer Join</li>
        <li>S6.0 - Cross Join</li>
        <li>S7.0 - Group By</li>
        <li>S8.0 - Having</li>
    </ul>
</div>
<div id="main">
    <div id="exerciseDescription">
        <h2>S1.0 - Select</h2>
        <p>Databases store data in tables, which we can think of like spreadsheets. Each table holds rows of data that share a common set of columns. The <em>SELECT</em> statement is used to retrieve rows of data from those tables. </p>

            <code>SELECT * FROM <i>table_name</i></code>

        <p>Try using the <em>SELECT</em> statement to retrieve rows from the <em>Clients</em> table.</p>
    </div>
    <div id="editor">
        <div id="queryInputArea">
            <div id="commandBar">
                <input id="queryExecutionButton" type="button" value="Execute" data-bind="click: runQuery" />
            </div>
            <textarea id="queryInput" cols="80" rows="8" data-bind="value: userQuery.content"></textarea>
        </div>
        <div id="queryResultsArea">
            <div id="queryResultsTab">Results</div>
            <div id="queryResults" data-bind="with: queryResults">
                <div data-bind="template: { name: isError() ? 'results-error' : 'results-rows' }"></div>
            </div>
        </div>
        <div id="queryExecutionStatusBar">
            <div id="queryStatus" data-bind="template: { name: isRunning() ? 'query-status-indicator-running' : 'query-status-indicator-notrunning'}" ></div>
            <div id="resultsCount" data-bind="template: { name: 'query-status-record-count', data: queryResults, if: queryResults }"></div>
        </div>
    </div>
</div>

    <script type="text/html" id="results-error">
        <div id="queryError">
            <div data-bind="if: isServerError">
                Web Server Error: <span data-bind="text: errorMessage"></span><br />
                The error has been logged and an email dispatched so Eli can look into it.
            </div>
            <div data-bind="ifnot: isServerError">
                Error # <span data-bind="text: errorNumber"></span><br />
                <span data-bind="text: errorMessage"></span>
            </div>
        </div>
    </script>

    <script type="text/html" id="results-rows">
        <div>
            <table data-bind="with: data" id="dataTable">
                <thead>
                    <tr>
                        <th></th>
                        <!-- ko foreach: headers -->
                        <th data-bind="text: ColumnName"></th>
                        <!-- /ko -->
                    </tr>
                </thead>
                <tbody data-bind="foreach: rows">
                    <tr>
                        <td data-bind="text: $index() + 1" class="index"></td>
                        <!-- ko foreach: Values -->
                        <td data-bind="text: $data"></td>
                        <!-- /ko -->
                    </tr>
                </tbody>
            </table>
        </div>
    </script>

    <script type="text/html" id="query-status-indicator-running">
        <span data-bind="if: isRunning">Running...</span>              
    </script>
    <script type="text/html" id="query-status-indicator-notrunning">
        <span data-bind="ifnot: queryResults">Ready</span>              
        <!-- ko with: queryResults -->
        <span data-bind="ifnot: isError">Ready</span>              
        <span data-bind="if: isError">Completed with Error</span>             
        <!-- /ko -->
    </script>
    <script type="text/html" id="query-status-record-count">
        <!-- ko ifnot: isError -->
        <div data-bind="if: isSubsetOfRows">
            Displaying first 100 of <span data-bind="text: totalRowCount" id="moreResultsLinkTotalCount"></span> rows
            (<a href="#" data-bind="click: $root.runQueryFull.bind($root)" id="moreResultsLink">Show All</a>)
        </div>
        <div data-bind="ifnot: isSubsetOfRows">
            <span data-bind="text: totalRowCount"></span> rows returned
        </div>
        <!-- /ko -->
    </script>


<script type="text/javascript">
    
    function Statement() {
        this.exerciseId = ko.observable(1);
        this.content = ko.observable("");
        this.limitResults = true;
    }

    function StatementResult(data) {
        this.exerciseId = ko.observable(data.ExerciseId || "");
        this.completesExercise = ko.observable(data.CompletesExercise || false);
        this.queryContent = ko.observable(data.Content || "");
        this.data = {
            headers: ko.observableArray(data.Data.Headers || []),
            rows: ko.observableArray(data.Data.Rows || [])
        };
        this.isSubsetOfRows = ko.observable(data.IsSubsetOfRows || false);
        this.totalRowCount = ko.observable(data.TotalRowCount || 0);
        this.errorMessage = ko.observable(data.ErrorMessage || "");
        this.errorNumber = ko.observable(data.ErrorNumber || 0);
        this.executionStatus = ko.observable(data.ExecutionStatus || "");
        this.isError = ko.computed(function () {
            return this.executionStatus() != ExecutionStatus.SUCCESS;
        }, this);
        this.isServerError = ko.computed(function () {
            return this.executionStatus() == ExecutionStatus.SERVER_ERROR;
        }, this);
    }


    var ExecutionStatus = {
        SERVER_ERROR: 2,
        ERROR: 1,
        SUCCESS: 0
    };

    var viewModel = {
        queryResults: ko.observable(),
        userQuery: new Statement(),
        runStatus: ko.observable(""),
        isRunning: ko.observable(false),
        runQuery: function () {
            self = this;
            self.userQuery.limitResults = true;
            self.isRunning(true);
            $.ajax("@indexURL", {
                type: "POST", contentType: "application/json", dataType: "json",
                data: ko.toJSON(this.userQuery),
                success: function (result) {
                    self.isRunning(false);
                    self.queryResults(new StatementResult(result));
                },
                error: function (xhr, status, error) {
                    self.isRunning(false);
                    var result = new StatementResult({ Data: {} });
                    result.exerciseId(self.userQuery.exerciseId);
                    result.executionStatus(ExecutionStatus.SERVER_ERROR);
                    result.errorMessage(error);
                    self.queryResults(result);
                }
            });
        },
        runQueryFull: function () {
            self = this;
            this.userQuery.limitResults = false;
            self.isRunning(true);
            $.ajax("@indexURL", {
                type: "POST", contentType: "application/json", dataType: "json",
                data: ko.toJSON(this.userQuery),
                success: function (result) {
                    self.isRunning(false);
                    self.queryResults(new StatementResult(result));
                },
                error: function (xhr, status, error) {
                    self.isRunning(false);
                    var result = new StatementResult({ Data: {}});
                    result.exerciseId(self.userQuery.exerciseId);
                    result.executionStatus(ExecutionStatus.SERVER_ERROR);
                    result.errorMessage(error);
                    self.queryResults(result);
                }
            });
        }
    };

    viewModel.userQuery.content("type a query here");

    ko.applyBindings(viewModel);
</script>
<style>
    #exerciseList {
        float: left;
        width: 300px;
    }
    #main {
        margin-left: 300px;
        max-width: 900px;
    }
    #exerciseDescription {
        background-color: #eeeeee;
        padding: .5em;
    }
    #exerciseDescription h2 {
        display: inline;
        margin: 0 .25em .25em 0;
        padding: 0 .25em .25em 0;
        font-size: 14pt;
    }
    #exerciseDescription p {
        line-height: 120%;
    }
    #exerciseDescription code {
        display: block;
        margin: 1em;
    }

    /* Editor */
    #editor {
        box-shadow: 0 0 5px 1px;
        margin-top: 1em;
    }

    /* Editor.QueryInputArea */
    #queryInputArea {
        border-bottom: 1px solid #aaaaaa;
        overflow: hidden;
    }

    /* Editor.QueryInputArea.CommandBar */
    #commandBar {
        background-color: #eeeeee;
        border-bottom: 1px solid #aaaaaa;
    }
    
    /* Editor.QueryInputArea.QueryInput */
    #queryInput {
        display: block;
        border-width: 0px;
        width: 100%;
    }

    /* Editor.QueryResultsArea */
    #queryResultsArea {
        background-color: #eeeeee;
        padding-top: 2px;
    }

    /* Editor.QueryResultsArea.QueryResultsTab */
    #queryResultsTab {
        background-color: white;
        margin-left: .25em;
        display: inline;
        border-top-left-radius: .25em;
        border-top-right-radius: .25em;
        padding: 0 1em;
        position:relative;
        z-index:20;
        border:1px solid #aaaaaa;
        border-width: 1px 1px 0px 1px;
        font-size: 90%;
    }

    /* Editor.QueryResultsArea.QueryResults */
    #queryResults {
        background-color: white;
        height: 300px;
        overflow: auto;
        border-top: 1px solid #aaaaaa;
        border-bottom: 1px solid #aaaaaa;
        position: relative;
        top: -2px;
        z-index:10;
    }

    /* Editor.QueryResultsArea.QueryResults.QueryError*/
    #queryError {
        padding: .5em;
        font-size: 90%;
        color: red;
    }

    /* Editor.QueryResultsArea.QueryResults.DataTable*/
    #dataTable {
        border-spacing: 0;
        border-collapse: collapse;
        font-size: 90%;
        margin: .1em;
        border: 1px solid #cccccc;
    }
    #dataTable th {
        border: 1px solid #cccccc;
        background-color: #eeeeee;
        font-weight: normal;
        text-align: left;
        padding: .2em 1em .2em .4em;
    }
    #dataTable .index {
        border: 1px solid #cccccc;
        background-color: #eeeeee;
        text-align: left;
        padding: .1em .2em;
    }
    #dataTable td {
        border: 1px solid #dddddd;
        text-align: left;
        padding: .1em 1em .1em .4em;
    }

    /* Editor.QueryExecutionStatusBar*/
    #queryExecutionStatusBar {
        background-color: #eeeeee;
        height: 20px;
        padding: 2px 4px 0px 4px;
        font-size: 90%;
    }
    
    /* Editor.QueryExecutionStatusBar.QueryStatus */
    #queryStatus {
        width: 15em;
        border-right: 1px solid #cccccc;
        display: inline-block;
        padding-left: .5em;
    }

    /* Editor.QueryExecutionStatusBar.ResultsCount */
    #resultsCount {
        display: inline-block;
        padding-left: .5em;
    }

</style>