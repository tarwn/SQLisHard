@{
    ViewBag.Title = "Exercise";
    string baseUrl = @Url.Content("~");
    string statementApiUrl = @Url.Content("~/api/Statement");
    string exercisesApiUrl = @Url.Content("~/api/Exercises/List");
    string userApiUrl = @Url.Content("~/api/User/GetLoggedInUser");
}
@section ExtraNavLinks {
    @*<span data-bind="ifnot: user"></span>*@
    @*<span data-bind="if: user">Welcome <a href="javascript: void(0);" data-bind="text: user().displayName"></a></span>*@
}

<div id="left">

    <div id="summary">
        <div id="exerciseList" data-bind="with: exercises">
            <h2 data-bind="text: title">Exercises</h2>
            <div data-bind="html: summary"></div>
            <ul data-bind="foreach: exercises">
                <li data-bind="click: $root.navigateTo.bind($data, '#/exercises/' + $parent.id() + '/' + id), css: { selected: id == $root.exercises().currentExercise().id }, attr: { 'data-exerciseid': id }">
                    <!-- ko if: ($root.user() != null && $root.user().hasCompleted(id)) -->
                        <i class="icon-check"></i>
                    <!-- /ko -->
                    <!-- ko ifnot: ($root.user() != null && $root.user().hasCompleted(id)) -->
                        <i class="icon-check-empty"></i>
                    <!-- /ko -->
                    <span data-bind="text: title"></span>
                </li>
            </ul>
        </div>
    </div>

    <a href="#" class="DEBUG" data-bind="visible: isDebug, attr: { href: '#/exercises/' + exercises().id() + '/' + exercises().nextExerciseId() }">Next Exercise</a>
</div>
<div id="main">
    <div id="exerciseDescription" data-bind="with: exercises().currentExercise">
        <h2 data-bind="text: title, attr: { 'data-exerciseid': id } " id="exerciseTitle">Exercise Title</h2>
        <div data-bind="html: explanation"></div>
        <div data-bind="html: example"></div>
        <div data-bind="html: exercise"></div>
    </div>
    <!-- ko with: exercises().currentExercise -->
    <div class="continueArea" data-bind="visible: ($root.user() != null && $root.user().hasCompleted(id))">Excellent! Lets <a class="button" id="continueButton" data-bind="attr: { href: '#/exercises/' + $root.exercises().id() + '/' + $root.exercises().nextExerciseId() }">Continue<i class="icon-play"></i></a>
    </div>
    <!-- /ko -->
    <div id="editor">
        <div id="queryInputArea">
            <div id="commandBar">
                <input id="queryExecutionButton" type="button" value="Execute" data-bind="click: executeQuery.bind(this, true), disable: currentQuery.isRunning" />
            </div>
            <textarea id="queryInput" cols="80" rows="5" data-bind="value: currentQuery.queryText"></textarea>
        </div>
        <div id="queryResultsArea">
            <div class="query-results-tab" data-bind="visible: !currentQuery.queryResult.isError, css: { selected: selectedResultsTab() == 'results' }, click: selectResultsTab">Results</div>
            <div class="query-results-tab" data-bind="css: { selected: selectedResultsTab() == 'messages' }, click: selectMessagesTab">Messages</div>
            <div id="queryResults" data-bind="with: currentQuery.queryResult">
                <div data-bind="if: tip, visible: tip, text: tip" id="tipDescription"></div>
                <div data-bind="visible: $root.selectedResultsTab() == 'results' && !isError()">
                    <!-- sub-div so we won't recalc table every time we change tabs -->
                    <div data-bind="template: { name: 'result-rows', if: !isError() }"></div>
                </div>
                <div data-bind="template: { name: 'result-error', if: $root.selectedResultsTab() == 'messages' && isError() }"></div>
                <div data-bind="visible: $root.selectedResultsTab() == 'messages' && !isError()">
                    <!-- sub-div so we won't recalc contents every time we change tabs -->
                    <div id="queryMessages" data-bind="foreach: infoMessages" class="query-results-messages">
                        <div data-bind="text: $data"></div>
                    </div>
                </div>
            </div>
        </div>
        <div id="queryExecutionStatusBar">
            <div id="queryStatus" data-bind="template: { name: currentQuery.isRunning() ? 'query-status-indicator-running' : 'query-status-indicator-notrunning', data: currentQuery}" ></div>
            <div id="resultsCount" data-bind="template: { name: 'query-status-record-count', data: currentQuery.queryResult, if: currentQuery.queryResult }"></div>
        </div>
    </div>
</div>

<script type="text/javascript">
    function attachRealInsights(fauxAppInsights) {
        if (!location.href.includes("sqlishard.com"))
            return;

        var appInsights = window.appInsights || function (a) {
            function b(a) { c[a] = function () { var b = arguments; c.queue.push(function () { c[a].apply(c, b) }) } } var c = { config: a }, d = document, e = window; setTimeout(function () { var b = d.createElement("script"); b.src = a.url || "https://az416426.vo.msecnd.net/scripts/a/ai.0.js", d.getElementsByTagName("script")[0].parentNode.appendChild(b) }); try { c.cookie = d.cookie } catch (a) { } c.queue = []; for (var f = ["Event", "Exception", "Metric", "PageView", "Trace", "Dependency"]; f.length;) b("track" + f.pop()); if (b("setAuthenticatedUserContext"), b("clearAuthenticatedUserContext"), b("startTrackEvent"), b("stopTrackEvent"), b("startTrackPage"), b("stopTrackPage"), b("flush"), !a.disableExceptionTracking) { f = "onerror", b("_" + f); var g = e[f]; e[f] = function (a, b, d, e, h) { var i = g && g(a, b, d, e, h); return !0 !== i && c["_" + f](a, b, d, e, h), i } } return c
        }({
            instrumentationKey: "a104c13c-600c-426c-8218-b64ce72f13bf"
        });

        window.appInsights = appInsights, appInsights.queue && 0 === appInsights.queue.length && appInsights.trackPageView();

        if (appInsights != null) {
            fauxAppInsights.trackEvent = function (eventName, data) { appInsights.trackEvent(eventName, data); };
            fauxAppInsights.trackPageView = function (pageName, url, data) { appInsights.trackPageView(pageName, url, data); };
        }
    }

    $(function () {
        // fake appInsights to let the rest of the load happen
        fauxAppInsights = {
            trackEvent: function (eventName, data) { },
            trackPageView: function (pageName, url, data) { }
        };

        // init so we can pass in API URL
        SqlIsHardApp.init(ko, jQuery, infuser, '@baseUrl', '@statementApiUrl', '@exercisesApiUrl', '@userApiUrl', null, fauxAppInsights);
        SqlIsHardApp.ViewModel.isDebug(false);

        // apply bindings
        ko.applyBindings(SqlIsHardApp.ViewModel);

        Finch.listen();

        // load real insights
        attachRealInsights(fauxAppInsights);
    });
</script>